use std::sync::Arc;

use datafusion::{
    functions::{
        core::*, crypto::*, datetime::*, encoding::*, math::*, regex::*, string::*,
        unicode::*,
    },
    functions_nested::*,
    logical_expr::ScalarUDF,
};

pub fn scalar_functions() -> Vec<Arc<ScalarUDF>> {
    vec![
        // datefusion core
        nullif(),
        arrow_cast(),
        nvl(),
        nvl2(),
        overlay(),
        arrow_typeof(),
        named_struct(),
        get_field(),
        coalesce(),
        greatest(),
        least(),
        union_extract(),
        union_tag(),
        version(),
        r#struct(),
        // datafusion crypto
        digest(),
        md5(),
        sha224(),
        sha256(),
        sha384(),
        sha512(),
        // datafusion datetime
        current_date(),
        current_time(),
        date_bin(),
        date_part(),
        date_trunc(),
        date_diff(),
        from_unixtime(),
        make_date(),
        now(),
        to_char(),
        to_date(),
        to_local_time(),
        to_unixtime(),
        to_timestamp(),
        to_timestamp_seconds(),
        to_timestamp_millis(),
        to_timestamp_micros(),
        to_timestamp_nanos(),
        // datafusion encoding
        encode(),
        decode(),
        // datafusion math
        abs(),
        acos(),
        acosh(),
        asin(),
        asinh(),
        atan(),
        atan2(),
        atanh(),
        cbrt(),
        ceil(),
        cos(),
        cosh(),
        cot(),
        degrees(),
        exp(),
        factorial(),
        floor(),
        gcd(),
        isnan(),
        iszero(),
        lcm(),
        ln(),
        log(),
        log2(),
        log10(),
        nanvl(),
        pi(),
        power(),
        radians(),
        random(),
        signum(),
        sin(),
        sinh(),
        sqrt(),
        tan(),
        tanh(),
        round(),
        trunc(),
        // datafusion regex
        regexp_count(),
        regexp_match(),
        regexp_instr(),
        regexp_like(),
        regexp_replace(),
        // datafusion string
        ascii(),
        bit_length(),
        btrim(),
        chr(),
        concat(),
        concat_ws(),
        ends_with(),
        levenshtein(),
        lower(),
        ltrim(),
        octet_length(),
        repeat(),
        replace(),
        rtrim(),
        split_part(),
        starts_with(),
        to_hex(),
        upper(),
        uuid(),
        contains(),
        // datafusion unicode
        character_length(),
        find_in_set(),
        initcap(),
        left(),
        lpad(),
        reverse(),
        right(),
        rpad(),
        strpos(),
        substr(),
        substr_index(),
        translate(),
        // datafusion nested
        string::array_to_string_udf(),
        string::string_to_array_udf(),
        range::range_udf(),
        range::gen_series_udf(),
        dimension::array_dims_udf(),
        cardinality::cardinality_udf(),
        dimension::array_ndims_udf(),
        datafusion::functions_nested::concat::array_append_udf(),
        datafusion::functions_nested::concat::array_prepend_udf(),
        datafusion::functions_nested::concat::array_concat_udf(),
        except::array_except_udf(),
        extract::array_element_udf(),
        extract::array_pop_back_udf(),
        extract::array_pop_front_udf(),
        extract::array_slice_udf(),
        extract::array_any_value_udf(),
        make_array::make_array_udf(),
        array_has::array_has_udf(),
        array_has::array_has_all_udf(),
        array_has::array_has_any_udf(),
        empty::array_empty_udf(),
        length::array_length_udf(),
        distance::array_distance_udf(),
        flatten::flatten_udf(),
        min_max::array_max_udf(),
        min_max::array_min_udf(),
        sort::array_sort_udf(),
        datafusion::functions_nested::repeat::array_repeat_udf(),
        resize::array_resize_udf(),
        datafusion::functions_nested::reverse::array_reverse_udf(),
        set_ops::array_distinct_udf(),
        set_ops::array_intersect_udf(),
        set_ops::array_union_udf(),
        position::array_position_udf(),
        position::array_positions_udf(),
        remove::array_remove_udf(),
        remove::array_remove_all_udf(),
        remove::array_remove_n_udf(),
        datafusion::functions_nested::replace::array_replace_n_udf(),
        datafusion::functions_nested::replace::array_replace_all_udf(),
        datafusion::functions_nested::replace::array_replace_udf(),
        map::map_udf(),
        map_entries::map_entries_udf(),
        map_extract::map_extract_udf(),
        map_keys::map_keys_udf(),
        map_values::map_values_udf(),
    ]
}
